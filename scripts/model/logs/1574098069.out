WARNING: Logging before InitGoogleLogging() is written to STDERR
I1118 18:27:54.026170  2905 solver.cpp:48] Initializing solver from parameters: 
train_net: "/media/compute/homes/galberding/FleckDetect/scripts/model/train.prototxt"
test_net: "validation.prototxt"
test_iter: 54
test_interval: 2500
base_lr: 1e-08
display: 20
max_iter: 10000
lr_policy: "step"
gamma: 0.1
momentum: 0.9
weight_decay: 0.0005
stepsize: 7500
snapshot: 2500
snapshot_prefix: "snapshot/ras"
test_compute_loss: true
average_loss: 20
iter_size: 10
I1118 18:27:54.034749  2905 solver.cpp:81] Creating training net from train_net file: /media/compute/homes/galberding/FleckDetect/scripts/model/train.prototxt
I1118 18:27:54.042898  2905 net.cpp:58] Initializing net from parameters: 
name: "RAS"
state {
  phase: TRAIN
}
layer {
  name: "data"
  type: "ImageLabelmapData"
  top: "data_unaugmented"
  top: "label_unaugmented"
  include {
    phase: TRAIN
  }
  transform_param {
    mean_value: 104.00699
    mean_value: 116.66877
    mean_value: 122.67892
  }
  image_data_param {
    source: "/media/compute/homes/galberding/FleckDetect/Datasets/FleckDataSet/imagemaps/train.txt"
    batch_size: 1
    shuffle: true
    new_height: 500
    new_width: 500
    normalize: true
  }
}
layer {
  name: "augmentation"
  type: "Python"
  bottom: "data_unaugmented"
  bottom: "label_unaugmented"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  python_param {
    module: "data_augmentation"
    layer: "DataAugmentation"
  }
}
layer {
  name: "conv1_1"
  type: "Convolution"
  bottom: "data"
  top: "conv1_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
    engine: CUDNN
  }
}
layer {
  name: "relu1_1"
  type: "ReLU"
  bottom: "conv1_1"
  top: "conv1_1"
}
layer {
  name: "conv1_2"
  type: "Convolution"
  bottom: "conv1_1"
  top: "conv1_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
    engine: CUDNN
  }
}
layer {
  name: "relu1_2"
  type: "ReLU"
  bottom: "conv1_2"
  top: "conv1_2"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1_2"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2_1"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    engine: CUDNN
  }
}
layer {
  name: "relu2_1"
  type: "ReLU"
  bottom: "conv2_1"
  top: "conv2_1"
}
layer {
  name: "conv2_2"
  type: "Convolution"
  bottom: "conv2_1"
  top: "conv2_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    engine: CUDNN
  }
}
layer {
  name: "relu2_2"
  type: "ReLU"
  bottom: "conv2_2"
  top: "conv2_2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2_2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv3_1"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    engine: CUDNN
  }
}
layer {
  name: "relu3_1"
  type: "ReLU"
  bottom: "conv3_1"
  top: "conv3_1"
}
layer {
  name: "conv3_2"
  type: "Convolution"
  bottom: "conv3_1"
  top: "conv3_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    engine: CUDNN
  }
}
layer {
  name: "relu3_2"
  type: "ReLU"
  bottom: "conv3_2"
  top: "conv3_2"
}
layer {
  name: "conv3_3"
  type: "Convolution"
  bottom: "conv3_2"
  top: "conv3_3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    engine: CUDNN
  }
}
layer {
  name: "relu3_3"
  type: "ReLU"
  bottom: "conv3_3"
  top: "conv3_3"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3_3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv4_1"
  type: "Convolution"
  bottom: "pool3"
  top: "conv4_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    engine: CUDNN
  }
}
layer {
  name: "relu4_1"
  type: "ReLU"
  bottom: "conv4_1"
  top: "conv4_1"
}
layer {
  name: "conv4_2"
  type: "Convolution"
  bottom: "conv4_1"
  top: "conv4_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    engine: CUDNN
  }
}
layer {
  name: "relu4_2"
  type: "ReLU"
  bottom: "conv4_2"
  top: "conv4_2"
}
layer {
  name: "conv4_3"
  type: "Convolution"
  bottom: "conv4_2"
  top: "conv4_3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    engine: CUDNN
  }
}
layer {
  name: "relu4_3"
  type: "ReLU"
  bottom: "conv4_3"
  top: "conv4_3"
}
layer {
  name: "pool4"
  type: "Pooling"
  bottom: "conv4_3"
  top: "pool4"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
    pad: 1
  }
}
layer {
  name: "conv5_1"
  type: "Convolution"
  bottom: "pool4"
  top: "conv5_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    engine: CUDNN
  }
}
layer {
  name: "relu5_1"
  type: "ReLU"
  bottom: "conv5_1"
  top: "conv5_1"
}
layer {
  name: "conv5_2"
  type: "Convolution"
  bottom: "conv5_1"
  top: "conv5_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    engine: CUDNN
  }
}
layer {
  name: "relu5_2"
  type: "ReLU"
  bottom: "conv5_2"
  top: "conv5_2"
}
layer {
  name: "conv5_3"
  type: "Convolution"
  bottom: "conv5_2"
  top: "conv5_3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    engine: CUDNN
  }
}
layer {
  name: "relu5_3"
  type: "ReLU"
  bottom: "conv5_3"
  top: "conv5_3"
}
layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv5_3"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
    pad: 1
  }
}
layer {
  name: "conv1-dsn6"
  type: "Convolution"
  bottom: "pool5"
  top: "conv1-dsn6"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine: CUDNN
  }
}
layer {
  name: "conv2-dsn6"
  type: "Convolution"
  bottom: "conv1-dsn6"
  top: "conv2-dsn6"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine: CUDNN
  }
}
layer {
  name: "relu1-dsn6"
  type: "ReLU"
  bottom: "conv2-dsn6"
  top: "conv2-dsn6"
}
layer {
  name: "conv3-dsn6"
  type: "Convolution"
  bottom: "conv2-dsn6"
  top: "conv3-dsn6"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine: CUDNN
  }
}
layer {
  name: "relu2-dsn6"
  type: "ReLU"
  bottom: "conv3-dsn6"
  top: "conv3-dsn6"
}
layer {
  name: "conv4-dsn6"
  type: "Convolution"
  bottom: "conv3-dsn6"
  top: "conv4-dsn6"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine: CUDNN
  }
}
layer {
  name: "relu3-dsn6"
  type: "ReLU"
  bottom: "conv4-dsn6"
  top: "conv4-dsn6"
}
layer {
  name: "conv5-dsn6"
  type: "Convolution"
  bottom: "conv4-dsn6"
  top: "conv5-dsn6"
  param {
    lr_mult: 0.1
    decay_mult: 1
  }
  param {
    lr_mult: 0.2
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine: CUDNN
  }
}
layer {
  name: "upsample32_dsn6"
  type: "Deconvolution"
  bottom: "conv5-dsn6"
  top: "conv5-dsn6-up"
  param {
    lr_mult: 0
    decay_mult: 1
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    kernel_size: 64
    stride: 32
  }
}
layer {
  name: "crop-dsn6"
  type: "Crop"
  bottom: "conv5-dsn6-up"
  bottom: "data"
  top: "upscore-dsn6"
}
layer {
  name: "loss6-score"
  type: "SigmoidCrossEntropyLoss"
  bottom: "upscore-dsn6"
  bottom: "label"
  top: "loss6-score"
  loss_weight: 1
}
layer {
  name: "upsample2_dsn5"
  type: "Deconvolution"
  bottom: "conv5-dsn6"
  top: "conv5-dsn6-5"
  param {
    lr_mult: 0
    decay_mult: 1
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    kernel_size: 4
    stride: 2
  }
}
layer {
  name: "crop1-dsn5"
  type: "Crop"
  bottom: "conv5-dsn6-5"
  bottom: "conv5_3"
  top: "weight-dsn6-5"
}
layer {
  name: "sigmoid-dsn5"
  type: "Sigmoid"
  bottom: "weight-dsn6-5"
  top: "sigmoid-dsn5"
}
layer {
  name: "rev-dsn5"
  type: "Power"
  bottom: "sigmoid-dsn5"
  top: "rev-dsn5"
  power_param {
    power: 1
    scale: -1
    shift: 1
  }
}
layer {
  name: "tile-dsn5"
  type: "Tile"
  bottom: "rev-dsn5"
  top: "weight-dsn5"
  tile_param {
    tiles: 512
  }
}
layer {
  name: "prod1-dsn5"
  type: "Eltwise"
  bottom: "conv5_3"
  bottom: "weight-dsn5"
  top: "prod1-dsn5"
  eltwise_param {
    operation: PROD
  }
}
layer {
  name: "conv1-dsn5"
  type: "Convolution"
  bottom: "prod1-dsn5"
  top: "conv1-dsn5"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine: CUDNN
  }
}
layer {
  name: "conv2-dsn5"
  type: "Convolution"
  bottom: "conv1-dsn5"
  top: "conv2-dsn5"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine: CUDNN
  }
}
layer {
  name: "relu1-dsn5"
  type: "ReLU"
  bottom: "conv2-dsn5"
  top: "conv2-dsn5"
}
layer {
  name: "conv3-dsn5"
  type: "Convolution"
  bottom: "conv2-dsn5"
  top: "conv3-dsn5"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine: CUDNN
  }
}
layer {
  name: "relu2-dsn5"
  type: "ReLU"
  bottom: "conv3-dsn5"
  top: "conv3-dsn5"
}
layer {
  name: "conv4-dsn5"
  type: "Convolution"
  bottom: "conv3-dsn5"
  top: "conv4-dsn5"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine: CUDNN
  }
}
layer {
  name: "sum-dsn5"
  type: "Eltwise"
  bottom: "conv4-dsn5"
  bottom: "weight-dsn6-5"
  top: "sum-dsn5"
  eltwise_param {
    operation: SUM
  }
}
layer {
  name: "upsample16_dsn5"
  type: "Deconvolution"
  bottom: "sum-dsn5"
  top: "sum-dsn5-up"
  param {
    lr_mult: 0
    decay_mult: 1
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    kernel_size: 32
    stride: 16
  }
}
layer {
  name: "crop2-dsn5"
  type: "Crop"
  bottom: "sum-dsn5-up"
  bottom: "data"
  top: "upscore-dsn5"
}
layer {
  name: "loss5-score"
  type: "SigmoidCrossEntropyLoss"
  bottom: "upscore-dsn5"
  bottom: "label"
  top: "loss5-score"
  loss_weight: 1
}
layer {
  name: "upsample2_dsn4"
  type: "Deconvolution"
  bottom: "sum-dsn5"
  top: "sum-dsn5-4"
  param {
    lr_mult: 0
    decay_mult: 1
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    kernel_size: 4
    stride: 2
  }
}
layer {
  name: "crop1-dsn4"
  type: "Crop"
  bottom: "sum-dsn5-4"
  bottom: "conv4_3"
  top: "weight-dsn5-4"
}
layer {
  name: "sigmoid-dsn4"
  type: "Sigmoid"
  bottom: "weight-dsn5-4"
  top: "sigmoid-dsn4"
}
layer {
  name: "rev-dsn4"
  type: "Power"
  bottom: "sigmoid-dsn4"
  top: "rev-dsn4"
  power_param {
    power: 1
    scale: -1
    shift: 1
  }
}
layer {
  name: "tile-dsn4"
  type: "Tile"
  bottom: "rev-dsn4"
  top: "weight-dsn4"
  tile_param {
    tiles: 512
  }
}
layer {
  name: "prod1-dsn4"
  type: "Eltwise"
  bottom: "conv4_3"
  bottom: "weight-dsn4"
  top: "prod1-dsn4"
  eltwise_param {
    operation: PROD
  }
}
layer {
  name: "conv1-dsn4"
  type: "Convolution"
  bottom: "prod1-dsn4"
  top: "conv1-dsn4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine: CUDNN
  }
}
layer {
  name: "conv2-dsn4"
  type: "Convolution"
  bottom: "conv1-dsn4"
  top: "conv2-dsn4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine: CUDNN
  }
}
layer {
  name: "relu1-dsn4"
  type: "ReLU"
  bottom: "conv2-dsn4"
  top: "conv2-dsn4"
}
layer {
  name: "conv3-dsn4"
  type: "Convolution"
  bottom: "conv2-dsn4"
  top: "conv3-dsn4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine: CUDNN
  }
}
layer {
  name: "relu2-dsn4"
  type: "ReLU"
  bottom: "conv3-dsn4"
  top: "conv3-dsn4"
}
layer {
  name: "conv4-dsn4"
  type: "Convolution"
  bottom: "conv3-dsn4"
  top: "conv4-dsn4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine: CUDNN
  }
}
layer {
  name: "sum-dsn4"
  type: "Eltwise"
  bottom: "conv4-dsn4"
  bottom: "weight-dsn5-4"
  top: "sum-dsn4"
  eltwise_param {
    operation: SUM
  }
}
layer {
  name: "upsample8_dsn4"
  type: "Deconvolution"
  bottom: "sum-dsn4"
  top: "sum-dsn4-up"
  param {
    lr_mult: 0
    decay_mult: 1
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    kernel_size: 16
    stride: 8
  }
}
layer {
  name: "crop2-dsn4"
  type: "Crop"
  bottom: "sum-dsn4-up"
  bottom: "data"
  top: "upscore-dsn4"
}
layer {
  name: "loss4-score"
  type: "SigmoidCrossEntropyLoss"
  bottom: "upscore-dsn4"
  bottom: "label"
  top: "loss4-score"
  loss_weight: 1
}
layer {
  name: "upsample2_dsn3"
  type: "Deconvolution"
  bottom: "sum-dsn4"
  top: "sum-dsn4-3"
  param {
    lr_mult: 0
    decay_mult: 1
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    kernel_size: 4
    stride: 2
  }
}
layer {
  name: "crop1-dsn3"
  type: "Crop"
  bottom: "sum-dsn4-3"
  bottom: "conv3_3"
  top: "weight-dsn4-3"
}
layer {
  name: "sigmoid-dsn3"
  type: "Sigmoid"
  bottom: "weight-dsn4-3"
  top: "sigmoid-dsn3"
}
layer {
  name: "rev-dsn3"
  type: "Power"
  bottom: "sigmoid-dsn3"
  top: "rev-dsn3"
  power_param {
    power: 1
    scale: -1
    shift: 1
  }
}
layer {
  name: "tile-dsn3"
  type: "Tile"
  bottom: "rev-dsn3"
  top: "weight-dsn3"
  tile_param {
    tiles: 256
  }
}
layer {
  name: "prod1-dsn3"
  type: "Eltwise"
  bottom: "conv3_3"
  bottom: "weight-dsn3"
  top: "prod1-dsn3"
  eltwise_param {
    operation: PROD
  }
}
layer {
  name: "conv1-dsn3"
  type: "Convolution"
  bottom: "prod1-dsn3"
  top: "conv1-dsn3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine: CUDNN
  }
}
layer {
  name: "conv2-dsn3"
  type: "Convolution"
  bottom: "conv1-dsn3"
  top: "conv2-dsn3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine: CUDNN
  }
}
layer {
  name: "relu1-dsn3"
  type: "ReLU"
  bottom: "conv2-dsn3"
  top: "conv2-dsn3"
}
layer {
  name: "conv3-dsn3"
  type: "Convolution"
  bottom: "conv2-dsn3"
  top: "conv3-dsn3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine: CUDNN
  }
}
layer {
  name: "relu2-dsn3"
  type: "ReLU"
  bottom: "conv3-dsn3"
  top: "conv3-dsn3"
}
layer {
  name: "conv4-dsn3"
  type: "Convolution"
  bottom: "conv3-dsn3"
  top: "conv4-dsn3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine: CUDNN
  }
}
layer {
  name: "sum-dsn3"
  type: "Eltwise"
  bottom: "conv4-dsn3"
  bottom: "weight-dsn4-3"
  top: "sum-dsn3"
  eltwise_param {
    operation: SUM
  }
}
layer {
  name: "upsample4_dsn3"
  type: "Deconvolution"
  bottom: "sum-dsn3"
  top: "sum-dsn3-up"
  param {
    lr_mult: 0
    decay_mult: 1
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    kernel_size: 8
    stride: 4
  }
}
layer {
  name: "crop2-dsn3"
  type: "Crop"
  bottom: "sum-dsn3-up"
  bottom: "data"
  top: "upscore-dsn3"
}
layer {
  name: "loss3-score"
  type: "SigmoidCrossEntropyLoss"
  bottom: "upscore-dsn3"
  bottom: "label"
  top: "loss3-score"
  loss_weight: 1
}
layer {
  name: "upsample2_1-dsn2"
  type: "Deconvolution"
  bottom: "sum-dsn3"
  top: "sum-dsn3-2"
  param {
    lr_mult: 0
    decay_mult: 1
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    kernel_size: 4
    stride: 2
  }
}
layer {
  name: "crop1-dsn2"
  type: "Crop"
  bottom: "sum-dsn3-2"
  bottom: "conv2_2"
  top: "weight-dsn3-2"
}
layer {
  name: "sigmoid-dsn2"
  type: "Sigmoid"
  bottom: "weight-dsn3-2"
  top: "sigmoid-dsn2"
}
layer {
  name: "rev-dsn2"
  type: "Power"
  bottom: "sigmoid-dsn2"
  top: "rev-dsn2"
  power_param {
    power: 1
    scale: -1
    shift: 1
  }
}
layer {
  name: "tile-dsn2"
  type: "Tile"
  bottom: "rev-dsn2"
  top: "weight-dsn2"
  tile_param {
    tiles: 128
  }
}
layer {
  name: "prod1-dsn2"
  type: "Eltwise"
  bottom: "conv2_2"
  bottom: "weight-dsn2"
  top: "prod1-dsn2"
  eltwise_param {
    operation: PROD
  }
}
layer {
  name: "conv1-dsn2"
  type: "Convolution"
  bottom: "prod1-dsn2"
  top: "conv1-dsn2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine: CUDNN
  }
}
layer {
  name: "conv2-dsn2"
  type: "Convolution"
  bottom: "conv1-dsn2"
  top: "conv2-dsn2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine: CUDNN
  }
}
layer {
  name: "relu1-dsn2"
  type: "ReLU"
  bottom: "conv2-dsn2"
  top: "conv2-dsn2"
}
layer {
  name: "conv3-dsn2"
  type: "Convolution"
  bottom: "conv2-dsn2"
  top: "conv3-dsn2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine: CUDNN
  }
}
layer {
  name: "relu2-dsn2"
  type: "ReLU"
  bottom: "conv3-dsn2"
  top: "conv3-dsn2"
}
layer {
  name: "conv4-dsn2"
  type: "Convolution"
  bottom: "conv3-dsn2"
  top: "conv4-dsn2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine: CUDNN
  }
}
layer {
  name: "sum-dsn2"
  type: "Eltwise"
  bottom: "conv4-dsn2"
  bottom: "weight-dsn3-2"
  top: "sum-dsn2"
  eltwise_param {
    operation: SUM
  }
}
layer {
  name: "upsample2_2-dsn2"
  type: "Deconvolution"
  bottom: "sum-dsn2"
  top: "sum-dsn2-up"
  param {
    lr_mult: 0
    decay_mult: 1
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    kernel_size: 4
    stride: 2
  }
}
layer {
  name: "crop2-dsn2"
  type: "Crop"
  bottom: "sum-dsn2-up"
  bottom: "data"
  top: "upscore-dsn2"
}
layer {
  name: "loss2-score"
  type: "SigmoidCrossEntropyLoss"
  bottom: "upscore-dsn2"
  bottom: "label"
  top: "loss2-score"
  loss_weight: 1
}
layer {
  name: "sigmoid-dsn1"
  type: "Sigmoid"
  bottom: "upscore-dsn2"
  top: "sigmoid-dsn1"
}
layer {
  name: "rev-dsn1"
  type: "Power"
  bottom: "sigmoid-dsn1"
  top: "rev-dsn1"
  power_param {
    power: 1
    scale: -1
    shift: 1
  }
}
layer {
  name: "tile-dsn1"
  type: "Tile"
  bottom: "rev-dsn1"
  top: "weight-dsn1"
  tile_param {
    tiles: 64
  }
}
layer {
  name: "prod1-dsn1"
  type: "Eltwise"
  bottom: "conv1_2"
  bottom: "weight-dsn1"
  top: "prod1-dsn1"
  eltwise_param {
    operation: PROD
  }
}
layer {
  name: "conv1-dsn1"
  type: "Convolution"
  bottom: "prod1-dsn1"
  top: "conv1-dsn1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine: CUDNN
  }
}
layer {
  name: "conv2-dsn1"
  type: "Convolution"
  bottom: "conv1-dsn1"
  top: "conv2-dsn1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine: CUDNN
  }
}
layer {
  name: "relu1-dsn1"
  type: "ReLU"
  bottom: "conv2-dsn1"
  top: "conv2-dsn1"
}
layer {
  name: "conv3-dsn1"
  type: "Convolution"
  bottom: "conv2-dsn1"
  top: "conv3-dsn1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine: CUDNN
  }
}
layer {
  name: "relu2-dsn1"
  type: "ReLU"
  bottom: "conv3-dsn1"
  top: "conv3-dsn1"
}
layer {
  name: "conv4-dsn1"
  type: "Convolution"
  bottom: "conv3-dsn1"
  top: "conv4-dsn1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine: CUDNN
  }
}
layer {
  name: "sum-dsn1"
  type: "Eltwise"
  bottom: "conv4-dsn1"
  bottom: "upscore-dsn2"
  top: "sum-dsn1"
  eltwise_param {
    operation: SUM
  }
}
layer {
  name: "crop2-dsn1"
  type: "Crop"
  bottom: "sum-dsn1"
  bottom: "data"
  top: "upscore-dsn1"
}
layer {
  name: "loss1-score"
  type: "SigmoidCrossEntropyLoss"
  bottom: "upscore-dsn1"
  bottom: "label"
  top: "loss1-score"
  loss_weight: 1
}
I1118 18:27:54.043309  2905 layer_factory.hpp:77] Creating layer data
I1118 18:27:54.043328  2905 net.cpp:100] Creating Layer data
I1118 18:27:54.043332  2905 net.cpp:408] data -> data_unaugmented
I1118 18:27:54.043340  2905 net.cpp:408] data -> label_unaugmented
I1118 18:27:54.043349  2905 image_labelmap_data_layer.cpp:41] Opening file /media/compute/homes/galberding/FleckDetect/Datasets/FleckDataSet/imagemaps/train.txt
I1118 18:27:54.044345  2905 image_labelmap_data_layer.cpp:51] Shuffling data
I1118 18:27:54.044448  2905 image_labelmap_data_layer.cpp:56] A total of 0 images.
srun: error: schlaubi: task 0: Segmentation fault (core dumped)
